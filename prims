#include <stdio.h>
#include <limits.h>  // For INT_MAX

#define V 5  // Example number of vertices

void printmst(int parent[], int graph[V][V]);

int minkey(int key[], int mstset[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (mstset[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void printmst(int parent[], int graph[V][V]) {
    int tw = 0;  // Variable to store total weight
    printf("edge\tweight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d\t%d\n", parent[i], i, graph[parent[i]][i]);
        tw += graph[parent[i]][i];
    }
    printf("total is: %d\n", tw);
}

int main() {
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };
    
    int parent[V];  // Parent array to store MST
    int key[V];  // Key values to pick minimum weight edge
    int mstset[V];  // Boolean array to represent vertices in MST

    // Initialize arrays
    for (int i = 0; i < V; i++) {
        parent[i] = -1;  // Initialize the parent array
        key[i] = INT_MAX;  // Set initial key values to a large number (INT_MAX)
        mstset[i] = 0;   // Mark all vertices as not part of the MST
    }
    
    // Set the key value of the first vertex to 0
    key[0] = 0;

    // Prim's algorithm to find MST
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum key vertex that is not yet included in MST
        int u = minkey(key, mstset);
        mstset[u] = 1;

        // Update the key values and parent array
        for (int v = 0; v < V; v++) {
            if (graph[u][v] && mstset[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printmst(parent, graph);  // Pass both parent and graph to the function
    return 0;
}
